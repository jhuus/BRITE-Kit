# Delete spectrograms from the database. Input is a directory of images generated by plot_from_db.py.

import argparse
import inspect
import os
import re
import sys

from pathlib import Path

# this is necessary before importing from a peer directory
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0, parentdir)

from core import util

parser = argparse.ArgumentParser()
parser.add_argument('--db', type=str, default='training', help='Database name. Default = training')
parser.add_argument('--inp', type=str, default=None, help='Input directory name. No default.')
parser.add_argument('--name', type=str, default=None, help='Class name')
args = parser.parse_args()

class_name = args.name
if class_name is None:
    print("Missing required --name argument")
    quit()

db = util.get_database(args.db)
input = args.inp

# need to get recording by species in case same file name is used for different species
recording_dict = {}
results = db.get_recording_by_subcat_name(class_name)
print(f"Found {len(results)} recordings")
for r in results:
    tokens = r.filename.split('.')
    recording_dict[tokens[0]] = r.id

if Path(input).is_file():
    spec_names = util.get_file_lines(input)
else:
    temp = os.listdir(input)
    spec_names = []
    for file_name in temp:
        if os.path.isfile(os.path.join(input, file_name)):
            base, ext = os.path.splitext(file_name)
            if ext == '.jpeg':
                spec_names.append(base)

for spec_name in spec_names:
    if '~' in spec_name:
        result = re.split("\\S+~(\\S+)-(\\S+)~.*", spec_name)
    else:
        result = re.split("(.+)-(.+)", spec_name)

    if len(result) != 4:
        print(f"Error: unknown file name format: {spec_name}")
        continue
    else:
        recording_name = result[1]
        offset = float(result[2])

    if recording_name in recording_dict.keys():
        recording_id = recording_dict[recording_name]
    else:
        print(f'recording not found: {recording_name}')
        quit()

    result = db.get_spectrogram_by_recid_and_offset(recording_id, offset)
    if result is None:
        print(f'spectrogram not found: {recording_name}-{offset}')
    else:
        print(f'deleting spectrogram ID {result.id}')
        db.delete_spectrogram('ID', result.id)
